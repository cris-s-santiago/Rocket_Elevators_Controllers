=============== Residential controller ======================== 

  *Objects that need to be controlled:

      1. Column (one)
      2. Elevators (2) (10 Floors)
      3. Call buttons
      4. Doors
      5. Floor request buttons  

===============================================================



'=============================================================== Column ==============================================================='

DEFINE Column USING identify AND amountOfElev       
    
  ID: identify  
  Status: active
  ElevatorList: empty list

    
    'Using a FOR(Loop) to create ElevatorList'
    SEQUENCE createElevator USING amountOfElev
      SET counter TO 1                                                                    
      FOR amountOfElev                                                   
        SET elevator TO INSTANTIATE Elevator WITH counter
        ADD elevator TO ElevatorList
        INCREMENT counter
      ENDFOR
    ENDSEQUENCE

    SEQUENCE requestElevator USING requestFloorExt AND requestDirectionExt
      CALL findBestElevator WITH requestFloorExt AND requestDirectionExt RETURNING bestElevatorFound
      IF bestElevatorFound Doors IS closed THEN
        CALL bestElevatorFound movElev WITH requestFloorExt AND requestDirectionExt
      ENDIF
    ENDSEQUENCE

    SEQUENCE findBestElevator USING requestFloorExt AND requestDirectionExt
      SET bestElevator TO NULL
      SET ElevatorAvailableList TO NULL

      'Select just the available elevators'
      FOR EACH elevator OF THIS ElevatorList
        IF elevator Status EQUAL idle 
          ADD elevator TO ElevatorAvailableList
        ENDIF
      ENDFOR

        'Compare each pair of elevators in the ElevatorList to find the nearst'
      FOR SET index = 1 TO ElevatorAvailableList
          IF ElevatorAvailableList LENGTH MORE THAN 1
              IF bestElevator IS NOT NULL
                  SET firstPairElement TO bestElevator
              ELSE
                  SET firstPairElement GET element index OF ElevatorAvailableList
              ENDIF
              SET secondPairElement GET element index + 1 OF ElevatorAvailableList
              
              'Calculation of the distance for the requested floor' 
              SET distFirstPairElement TO ABSOLUTE (firstPairElement CurrentFloor- requestFloorExt)
              SET distSecondPairElement TO ABSOLUTE (secondPairElement CurrentFloor - requestFloorExt)
              'Set the first element if nearst, othewise set second element'
              IF distFirstPairElement < distSecondPairElement
                  SET bestElevator TO firstPairELement
              ELSE
                  SET bestElevator TO secondPairElement
              ENDIF
          ELSE
              SET bestElevator GET element x OF ElevatorAvailableList
          ENDIF
      ENDFOR      
      RETURN bestElevator

    ENDSEQUENCE 

    'Calling the functions that created ElevatorList and CallButtonList'
    CALL createElevator WITH amountOfElev

ENDDEFINE



'=============================================================== Elevator ==============================================================='

DEFINE Elevator USING identify                    
    ID: identify        
    Status: idle                                                        'Idle or moving'
    Direction: NULL                              
    CurrentFloor: 1
    ElevFloorDestination: NULL                                  
    Doors: INSTANTIATE OF Doors
    MaxCapacity: 1500                                                   'Weight measured in pounds'
    ActualCapacity: NULL
    MaxCapacityDisplay: NULL                                             

    SEQUENCE movElev USING requestFloor AND requestDirection    
      SET THIS Direction TO requestDirection AND THIS Status TO moving AND THIS ElevFloorDestination TO requestFloor
      WHILE THIS CurrentFloor IS NOT EQUAL THIS ElevFloorDestination 
        IF Direction EQUAL up
          CurrentFloor INCREMENT
        ENDIF
        IF Direction EQUAL down
          CurrentFloor DECREMENT
        ENDIF
      ENDWHILE

      CALL operateDoors WITH opened
      SET THIS Status TO idle
    ENDSEQUENCE

    SEQUENCE operateDoors USING command
        READ sensorDoor                                                 'Value provided by the external sensor'
        IF sensorDoor IS false
          SET THIS Doors Status TO command
        ENDIF
    ENDSEQUENCE

    SEQUENCE ElevRequestButtons USING requestFloorInt
      CALL operateDoors WITH closed
      IF requestFloorInt > CurrentFloor
        SET elevDirection TO up
      ELSE IF requestFloorInt < CurrentFloor
        SET elevDirection TO down
      ENDIF

      CALL CapacityCalculate
      IF MaxCapacityStatus IS EQUAL loaded THEN
        CALL movElev WITH requestFloorInt AND elevDirection
      ENDIF
    ENDSEQUENCE

    SEQUENCE CapacityCalculate
      READ ActualCapacity                                                 'Value provided by the lift scale'
      IF ActualCapacity IS LESS THAN OR EQUAL TO MaxCapacity THEN
          SHOW MaxCapacityDisplay "LOADED"
          SET MaxCapacityStatus TO loaded
      ELSE
          SET Status to stopped 
          CALL operateDoors WITH opened
          SHOW MaxCapacityDisplay "OVERLOADED"
          SET MaxCapacityStatus TO overloaded
      ENDIF
    ENDSEQUENCE

    CALL movElev WITH CurrentFloor AND Direction                         'Start possition elevator'
 
    
ENDDEFINE



'=============================================================== CallButtons ==============================================================='

DEFINE CallButtons
  SET floor
  SET direction
ENDDEFINE



'=============================================================== Doors ==============================================================='

DEFINE Doors
  Status: closed // opened or closed

ENDDEFINE



'=============================================================== FloorRequestButtons ==============================================================='

DEFINE FloorRequestButtons
  ElevButtonList: empty list
ENDDEFINE



===============================================================   TEST   ===============================================================

*Residential Scenarios:

SET Column1 to INSTANTIATE Column WITH 1 AND 2

  -Scenario 1:  
    CALL Column1 requestElevator WITH 3, Up    
    CALL Elevator ElevRequestButtons WITH 7

  -Scenario 2:
    CALL Column1 requestElevator WITH 1, Up
    CALL Elevator ElevRequestButtons WITH 6

    CALL Column1 requestElevator WITH 3, Up
    CALL Elevator ElevRequestButtons WITH 5

    CALL Column1 requestElevator WITH 9, Down
    CALL Elevator ElevRequestButtons WITH 2

  -Scenario 3:
    CALL Column1 requestElevator WITH 3, Down         
    CALL Elevator ElevRequestButtons WITH 2

    CALL Column1 requestElevator WITH 10, Down
    CALL Elevator ElevRequestButtons WITH 3

===============================================================  ENDTEST  ===============================================================

