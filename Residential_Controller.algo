=============== Residential controller ======================== 

  *Objects that need to be controlled:

      1. Column (one)
      2. Elevators (2) (10 Floors)
      3. Call buttons
      4. Doors
      5. Floor request buttons  

===============================================================



'=============================================================== Column ==============================================================='

DEFINE Column USING identify AND amountOfElev       
    
  ID: identify  
  Status: NULL
  ElevatorList: empty list

    
    'Through this sequence we create the elevators.
    SEQUENCE createElevator USING amountOfElev
      SET counter TO 1                                                                    
      FOR amountOfElev                                                   
        SET elevator TO INSTANTIATE Elevator WITH counter
        ADD elevator TO ElevatorList
        INCREMENT counter
      ENDFOR
    ENDSEQUENCE

    'Through this sequence, we will handle the request for an elevator.'
    SEQUENCE requestElevator USING requestFloorExt AND requestDirectionExt
      CALL findBestElevator WITH requestFloorExt AND requestDirectionExt RETURNING bestElevatorFound
      CALL bestElevatorFound movElev WITH requestFloorExt AND requestDirectionExt      
    ENDSEQUENCE

    'Through this sequence we can find the best elevator for each scenario'
    SEQUENCE findBestElevator USING requestFloorExt AND requestDirectionExt
      SET bestElevator TO NULL
      SET ElevatorAvailableList TO NULL
      'Creates a list of the elevators that are in the idle status.'
      FOR EACH elevator OF THIS ElevatorList
        IF elevator Status IS EQUAL TO idle 
          ADD elevator TO ElevatorAvailableList
        ENDIF
      ENDFOR
      'Compare each pair of elevators in the ElevatorAvailableList to find the nearest elevator'
      FOR SET index = 1 TO ElevatorAvailableList
          IF ElevatorAvailableList LENGTH IS GREATER THAN 1
              IF bestElevator IS NOT NULL
                  SET firstPairElement TO bestElevator
              ELSE
                  SET firstPairElement GET element index OF ElevatorAvailableList
              ENDIF
              SET secondPairElement GET element index + 1 OF ElevatorAvailableList
              
              'Calculation of the distance for the requested floor' 
              SET distFirstPairElement TO ABSOLUTE (firstPairElement CurrentFloor- requestFloorExt)
              SET distSecondPairElement TO ABSOLUTE (secondPairElement CurrentFloor - requestFloorExt)
              'Set the first element if nearst, othewise set second element'
              IF distFirstPairElement IS LESS THAN distSecondPairElement
                  SET bestElevator TO firstPairELement
              ELSE
                  SET bestElevator TO secondPairElement
              ENDIF
          ELSE
              SET bestElevator GET element x OF ElevatorAvailableList
          ENDIF
      ENDFOR      
      RETURN bestElevator
    ENDSEQUENCE 

    'Calling the functions that created ElevatorList'
    CALL createElevator WITH amountOfElev

ENDDEFINE



'=============================================================== Elevator ==============================================================='

DEFINE Elevator USING identify                    
    ID: identify        
    Status: idle                                                        'Idle or moving'
    Direction: NULL                              
    CurrentFloor: 1
    ElevFloorDestination: NULL                                  
    Doors: INSTANTIATE OF Doors
    MaxCapacity: 1500                                                   'Weight measured in pounds'
    MaxCapacityStatus: NULL


    'Through this sequence we can move the elevator'
    SEQUENCE movElev USING requestFloor AND requestDirection
      'Check elevator capacity, as long as it is not safe, it will not move.'
      REPEAT CALL CapacityCalculate
      UNTIL MaxCapacityStatus IS EQUAL TO loaded
      'Check if the door is closed to move the elevator'
      CALL operateDoors WITH closed
      IF THIS Doors Status IS EQUAL TO closed THEN
        'Set which direction is requested, change the status of the elevator to moving, and which floor is desired'
        SET THIS Direction TO requestDirection AND THIS Status TO moving AND THIS ElevFloorDestination TO requestFloor
        WHILE THIS CurrentFloor IS NOT EQUAL TO THIS ElevFloorDestination 
          IF Direction IS EQUAL TO up
            CurrentFloor INCREMENT
          ENDIF
          IF Direction IS EQUAL TO down
            CurrentFloor DECREMENT
          ENDIF
        ENDWHILE
        'When you reach the destination, change the status to idle and open the door'
        SET THIS Status TO idle
        CALL operateDoors WITH opened        
      ENDIF      
    ENDSEQUENCE

    
    'Through this sequence we can verify that there is no obstruction in the door.'
    SEQUENCE operateDoors USING command
        READ sensorDoor                                                 'Value provided by the external sensor'
        IF sensorDoor IS false
          SET THIS Doors Status TO command
        ENDIF
    ENDSEQUENCE

    'Through this sequence we check if we are not overweight in the elevator.'
    SEQUENCE CapacityCalculate
      READ ActualCapacity                                                  'Value provided by the lift scale'
      IF ActualCapacity IS LESS THAN OR EQUAL TO MaxCapacity THEN          
          SET MaxCapacityStatus TO loaded
          SHOW MaxCapacityStatus
      ELSE
          SET Status to stopped 
          CALL operateDoors WITH opened
          SET MaxCapacityStatus TO overloaded
          SHOW MaxCapacityStatus
      ENDIF
    ENDSEQUENCE

    CALL movElev WITH CurrentFloor AND Direction                         'Start possition elevator'    
ENDDEFINE





'=============================================================== CallButtons ==============================================================='

DEFINE CallButtons
  Floor:
  Direction:
ENDDEFINE



'=============================================================== Doors ==============================================================='

DEFINE Doors
  Status: closed // opened or closed
ENDDEFINE



'=============================================================== FloorRequestButtons ==============================================================='

DEFINE FloorRequestButtons
  ElevButtonList: empty list
ENDDEFINE



===============================================================   TEST   ===============================================================

*Residential Scenarios:

SET Column1 to INSTANTIATE Column WITH 1 AND 2

  -Scenario 1:  
    CALL Column1 requestElevator WITH 3, Up    
    CALL Elevator ElevRequestButtons WITH 7

  -Scenario 2:
    CALL Column1 requestElevator WITH 1, Up
    CALL Elevator ElevRequestButtons WITH 6

    CALL Column1 requestElevator WITH 3, Up
    CALL Elevator ElevRequestButtons WITH 5

    CALL Column1 requestElevator WITH 9, Down
    CALL Elevator ElevRequestButtons WITH 2

  -Scenario 3:
    CALL Column1 requestElevator WITH 3, Down         
    CALL Elevator ElevRequestButtons WITH 2

    CALL Column1 requestElevator WITH 10, Down
    CALL Elevator ElevRequestButtons WITH 3

===============================================================  ENDTEST  ===============================================================

