=============== Commercial controller ======================== 

  *Objects that need to be controlled:

      1. Battery (one)
      2. Columns (4)
      3. Elevators (3 per column) (66 Floors)
      4. Call buttons
      5. Doors
      6. Floor request buttons
      7. Floor display


===============================================================


'=============================================================== Battery ==============================================================='

DEFINE Battery USING amountOfColumns AND amountOfElevColumn
    ColumnList: empty List

    'Through this sequence we create the columns.
    'Using the number of elevators that must exist inside it.'
    SEQUENCE createColumns USING amountOfElevColumn
        SET counter TO 1
        FOR amountOfColumns
          SET column TO INSTANTIATE Column WITH counter AND amountOfElevColumn
          ADD column TO columnList
          INCREMENT counter
        ENDFOR
    ENDSEQUENCE

    'Through this sequence, we will handle the request for an elevator.
      '- First case: Someone who is on some floor of the building or underground and wants to go to the ground floor.     
      '- Second case: Someone who is on the ground floor and wants to go to some floor of the building or the basement.
      
    SEQUENCE requestElevator USING requestFloorDestination AND buttonFloorOrigin
      IF requestFloorDestination IS EQUAL TO 1
        CALL requestRC WITH requestFloorDestination AND buttonFloorOrigin
      ELSE
        CALL requestFloorSpecific WITH requestFloorDestination AND buttonFloorOrigin        
      ENDIF
    ENDSEQUENCE

    'Through this sequence, we will handle the first case.'
    SEQUENCE requestFloorSpecific USING requestFloorDestination AND buttonFloorOrigin
      CALL findColumn WITH requestFloorDestination RETURNING bestColumn
      IF requestFloorDestination IS LESS THAN 1 THEN
        SET requestFloorDirection TO down
      ELSE
        SET requestFloorDirection TO up
      ENDIF        
      CALL bestColumn findBestElevator WITH requestFloorDestination AND requestFloorDirection AND buttonFloorOrigin RETURNING bestElevatorFound
      SET FloorDisplay1 TO INSTANTIATE FloorDisplay
      CALL FloorDisplay PrintMessage WITH "Your column is " + bestColumn + "and your elevator is " + bestElevatorFound
      CALL bestElevatorFound movElev WITH requestFloorDestination AND requestFloorDirection
      ENDIF
    ENDSEQUENCE

    'Through this sequence, we will handle the second case.'
    SEQUENCE requestRC USING requestFloorDestination AND buttonFloorOrigin
      CALL findColumn WITH buttonFloorOrigin RETURNING ActualColumn
      IF buttonFloorOrigin IS LESS THAN 1 THEN
          SET requestFloorDirection TO up
      ELSE
          SET requestFloorDirection TO down
      ENDIF      
      CALL ActualColumn findBestElevator WITH requestFloorDestination AND requestFloorDirection AND buttonFloorOrigin RETURNING bestElevatorFound        
      CALL bestElevatorFound movElev WITH requestFloorDestination AND requestFloorDirection
    ENDSEQUENCE

    'Through this sequence, we will find the column.
      '-First case: Which column should the person address.
      '-Second case: Which column it is in.'
    SEQUENCE findColumn USING requestFloorDestination
      IF requestFloorDestination IS LESS THAN 1
          RETURN first element of ColumnList
      ELSE IF requestFloorDestination IS GREATER THAN 1  AND IS LESS THAN 21
          RETURN second element of ColumnList
      ELSE IF requestFloorDestination IS GREATER THAN 20  AND IS LESS THAN 41
          RETURN third element of ColumnList
      ELSE IF requestFloorDestination IS GREATER THAN 40
          RETURN fourth element of ColumnList
    ENDSEQUENCE     

    'Call the sequence that creates the column, passing the number of elevators it must contain.'
    CALL createColumns WITH amountOfElevCollum
ENDDEFINE



'=============================================================== Column ==============================================================='

DEFINE Column USING identify AND amountOfElev   
  ID: identify  
  Status: NULL
  ElevatorList: empty list

    
    'Through this sequence we create the elevators.
    SEQUENCE createElevator USING amountOfElev
        SET counter TO 1                                                                    
        FOR amountOfElev                                                   
            SET elevator TO INSTANTIATE Elevator WITH counter
            ADD elevator TO ElevatorList
            INCREMENT counter
        ENDFOR
    ENDSEQUENCE

    'Through this sequence we can find the best elevator for each scenario'
    SEQUENCE findBestElevator USING requestFloorDestination AND requestFloorDirection AND buttonFloorOrigin
        SET bestElevator TO NULL
        SET ElevatorAvailableList TO NULL

      'In this case the elevator is on the same floor where the request occurs and is going in the same direction'
        FOR EACH elevator OF THIS ElevatorList
            IF buttonFloorOrigin IS EQUAL TO elevator CurrentFloor AND requestFloorDirection IS EQUAL TO elevator Direction                                                             'Scenario 2'
              SET bestElevator TO elevator
              BREAK
              'In the other possible scenarios, we will create a list of possible elevators that can fulfill our request.'
            ELSE IF requestFloorDestination IS LESS THAN buttonFloorOrigin AND elevator Direction IS EQUAL TO down AND elevator CurrentFloor IS GREATER THAN buttonFloorOrigin THEN     'Scenario 3'
                ADD elevator TO ElevatorAvailableList
            ELSE IF requestFloorDestination IS GREATER THAN buttonFloorOrigin AND elevator Direction IS EQUAL TO down AND elevator CurrentFloor IS GREATER THAN buttonFloorOrigin THEN  'Scenario 1'
                ADD elevator TO ElevatorAvailableList
            ELSE IF requestFloorDestination IS GREATER THAN buttonFloorOrigin AND elevator Direction IS EQUAL TO up AND elevator CurrentFloor IS LESS THAN buttonFloorOrigin THEN       'Scenario 4'
                ADD elevator TO ElevatorAvailableList
            ENDIF
        ENDFOR

        'Ensures you have an elevator list to review.'
        IF ElevatorAvailableList LENGTH IS NOT NULL THEN
            'Compare each pair of elevators in the ElevatorList to find the nearest elevator'
            FOR SET index = 1 TO ElevatorAvailableList

                IF ElevatorAvailableList LENGTH IS GREATER THAN 1

                    IF bestElevator IS NOT NULL
                        SET firstPairElement TO bestElevator
                    ELSE
                        SET firstPairElement GET index element OF ElevatorAvailableList
                    ENDIF

                    SET secondPairElement GET index element + 1 OF ElevatorAvailableList

                    'Calculation of the distance for the requested floor' 
                    SET distFirstPairElement TO ABSOLUTE (firstPairElement CurrentFloor- requestFloorDestination)
                    SET distSecondPairElement TO ABSOLUTE (secondPairElement CurrentFloor - requestFloorDestination)

                    'Set the first element if nearst, othewise set second element'
                    IF distFirstPairElement IS LESS THAN distSecondPairElement
                        SET bestElevator TO firstPairELement
                    ELSE
                        SET bestElevator TO secondPairElement
                    ENDIF

                ELSE
                    SET bestElevator GET index element OF ElevatorAvailableList
                ENDIF
            ENDFOR
        ENDIF     
        RETURN bestElevator

    ENDSEQUENCE 

    'Calling the functions that created ElevatorList'
    CALL createElevator WITH amountOfElev

ENDDEFINE



'=============================================================== Elevator ==============================================================='

DEFINE Elevator USING identify                    
    ID: identify        
    Status: idle                                                        'Idle or moving'
    Direction: NULL                              
    CurrentFloor: 1
    ElevFloorDestination: NULL                                  
    Doors: INSTANTIATE OF Doors
    MaxCapacity: 1500                                                   'Weight measured in pounds'
    ActualCapacity: NULL
    MaxCapacityDisplay: NULL
                                         

    'Through this sequence we can move the elevator'
    SEQUENCE movElev USING requestFloor AND requestDirection
      'Check elevator capacity, as long as it is not safe, it will not move.'
      REPEAT CALL CapacityCalculate
      UNTIL MaxCapacityStatus IS EQUAL TO loaded
      'Check if the door is closed to move the elevator'
      CALL operateDoors WITH closed
      IF THIS Doors Status IS EQUAL TO closed THEN
        'Set which direction is requested, change the status of the elevator to moving, and which floor is desired'
        SET THIS Direction TO requestDirection AND THIS Status TO moving AND THIS ElevFloorDestination TO requestFloor
        WHILE THIS CurrentFloor IS NOT EQUAL TO THIS ElevFloorDestination 
          IF Direction IS EQUAL TO up
            CurrentFloor INCREMENT
          ENDIF
          IF Direction IS EQUAL TO down
            CurrentFloor DECREMENT
          ENDIF
        ENDWHILE
        'When you reach the destination, change the status to idle and open the door'
        SET THIS Status TO idle
        CALL operateDoors WITH opened        
      ENDIF      
    ENDSEQUENCE


    'Through this sequence we can verify that there is no obstruction in the door.'
    SEQUENCE operateDoors USING command
      READ sensorDoor                                                 'Value provided by the external sensor'
      IF sensorDoor IS false
        SET THIS Doors Status TO command
      ENDIF
    ENDSEQUENCE

    'Through this sequence we check if we are not overweight in the elevator.'
    SEQUENCE CapacityCalculate
      READ ActualCapacity                                                 'Value provided by the lift scale'
      IF ActualCapacity IS LESS THAN OR EQUAL TO MaxCapacity THEN
          SHOW MaxCapacityDisplay "LOADED"
          SET MaxCapacityStatus TO loaded
      ELSE
          SET Status to stopped 
          CALL operateDoors WITH opened
          SHOW MaxCapacityDisplay "OVERLOADED"
          SET MaxCapacityStatus TO overloaded
      ENDIF
    ENDSEQUENCE

    CALL movElev WITH CurrentFloor AND Direction                          'Start possition elevator'
 
    
ENDDEFINE



'=============================================================== CallButtons ==============================================================='

DEFINE CallButtons
  Floor:
  Direction:
ENDDEFINE



'=============================================================== Doors ==============================================================='

DEFINE Doors
  Status: 
  sensorObstruction: 
ENDDEFINE



'=============================================================== FloorRequestButtons ==============================================================='

DEFINE FloorRequestButtons
  ElevButtonList: empty list
ENDDEFINE


'=============================================================== Floor display ==============================================================='

DEFINE FloorDisplay
  Display: NULL
  'Through this sequence we can show the column and the correct floor.'
  SEQUENCE PrintMessage USING text
    SET THIS Display TO text
    SHOW Display
  ENDSEQUENCE
ENDDEFINE


===============================================================   TEST   ===============================================================

*Commercial Scenarios:

SET Battery1 to INSTANTIATE Battery WITH 4 AND 3

  -Scenario 1:  
    CALL Battery1 requestElevator WITH 20 AND 1

  -Scenario 2:
    CALL Battery1 requestElevator WITH 36 AND 1

  -Scenario 3:
    CALL Battery1 requestElevator WITH 1 AND 58

  -Scenario 4:
    CALL Battery1 requestElevator WITH 1 AND -3

===============================================================  ENDTEST  ===============================================================